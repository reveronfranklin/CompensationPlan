@page "/indice-historico"
@inject HttpClient Http
@using Compensation.Client.Data
@inject PeriodoService periodoService
@inject OficinaService oficinaService
@inject VendedorService vendedorService
@inject HistoricoService historicoService

<h3>Historico de Comisiones</h3>
<br />


<div class="card" style="width: 58rem;">
    
    <div class="card-body">
        <h5 class="card-title">Filtros</h5>

        @if (periodoList == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {


            <div class="row">
                <div class="col-sm-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Periodo</h5>
                            <p class="card-text"></p>
                            <select class="custom-select" id="periodoDrop" @onchange="@PeriodoSelectionChanged">
                                <option value="">-- Select Periodo --</option>
                                @if (periodoList != null)
                                {
                                    @foreach (var itemOficina in periodoList)
                                    {
                                        <option value="@itemOficina.ID">@itemOficina.FechaDescripcion</option>
                                    }
                                }


                            </select>
                        </div>
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Oficina</h5>
                            <p class="card-text"></p>
                            <select class="custom-select" id="oficinaDrop" @onchange="@OficinaSelectionChanged">
                                <option value="">-- Select Oficina --</option>
                                @if (oficinaList != null)
                                {
                                    @foreach (var itemOficina in oficinaList)
                                    {
                                        <option value="@itemOficina.CodOficina">@itemOficina.NombreOficina</option>
                                    }
                                }


                            </select>
                        </div>
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Consultor</h5>
                            <p class="card-text"></p>
                            <select class="custom-select" id="vendedorDrop" @onchange="@VendedorSelectionChanged">
                                <option value="">-- Select Vendedor --</option>
                                @if (vendedorList != null)
                                {
                                    @foreach (var itemVendedor in vendedorList)
                                    {
                                        <option value="@itemVendedor.Codigo">@itemVendedor.Nombre</option>
                                    }
                                }

                            </select>
                        </div>
                    </div>
                </div>
            </div>

        }




    </div>
</div>


<br />




@if (historicoView != null)
{
    <table class="table table-striped">
        <thead class="thead-dark">
            <tr>


                <th></th>
                <th>
                    <div>

                        <input type="text" @bind="documento" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-lg" />
                    </div>
                </th>
                <th>
                    <div>

                        <input type="text" @bind="orden" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-lg" />
                    </div>
                </th>
                <th>
                    <div>

                        <input type="text" @bind="producto" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-lg" />
                    </div>
                </th>


                <th></th>

                <th>
                    <div>

                        <input type="text" @bind="tipoPagoDescripcion" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-lg" />
                    </div>
                </th>
                <th> <button class="btn btn-primary" @onclick="@(() => GetDataHistorico(IdPeriodo, codigoVendedor))"> Buscar</button></th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>


            </tr>
            <tr>


                <th>Tr</th>
                <th>Doc.</th>
                <th>Orden</th>
                <th>Producto</th>
                <th>Monto</th>
                <th>Tipo Pago</th>
                <th>Comision</th>
                <th data-toggle="tooltip" data-placement="top" title="Porcentaje Comision Flat">% Tabla 1</th>
                <th data-toggle="tooltip" data-placement="top" title="Porc Rango Cumplimiento Cuota General">% Tabla 2</th>
                <th data-toggle="tooltip" data-placement="top" title="Porc Cantidad Cuotas Cumplidas">% Tabla 3</th>
                <th>Cant. Cuotas</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var item in historicoView)
            {
                <tr>
                    <td>@item.Transaccion</td>
                    <td>@item.DocumentoString</td>
                    <td>@item.OrdenString</td>
                    <td>@item.Producto</td>
                    <td align="right">@item.MontoRealString</td>
                    <td>@item.DescripcionTipoPago</td>
                    <td align="right">@item.MontoString</td>
                    <td>@item.PorcFlat</td>
                    <td>@item.PorcRangoCumplimientoCuotaGeneral</td>
                    <td>@item.PorcCantidadCuotasCumplidas</td>
                    <td>@item.CantidadCuotasCumplidas</td>



                </tr>
            }
            <tr>


                <td></td>
                <td class="font-weight-bold">Total Vendedor==========></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td align="right" class="font-weight-bold">@TotalVendedorString</td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
        </tbody>
    </table>
}






@code {
    WSMY686[] periodoList { get; set; }
    WSMY686[] periodoView { get; set; }

    PCHistorico[] historicoView { get; set; }
    PCHistorico[] historico { get; set; }



    PCOficina pCOficina = new PCOficina();

    PCOficina[] oficinaList { get; set; }

    PCVendedor[] vendedorList { get; set; }



    int IdPeriodo = 0;
    public int oficinaId = 0;
    string codigoVendedor = "";
    decimal TotalVendedor = 0;
    string TotalVendedorString = "";

      string tipoPagoDescripcion="";
      string orden = "";
      string documento = "";
      string producto = "";

    protected override async Task OnInitializedAsync()
    {
        await GetDataPeriodo();
        await GetDataOficina();
        codigoVendedor = "";
    }

    async Task GetDataPeriodo()
    {

        periodoView = await periodoService.getPeriodoAsync();
        periodoList = periodoView.OrderByDescending(p => p.Hasta).ToArray();


    }

    async Task GetDataOficina()
    {
        oficinaList = await oficinaService.GetOficinaAsync();
    }
    async Task PeriodoSelectionChanged(ChangeEventArgs e)
    {

        if (int.TryParse(e.Value.ToString(), out int id))
        {
            IdPeriodo = id;
            historicoView = null;


        }

    }

    async Task OficinaSelectionChanged(ChangeEventArgs e)
    {

        if (int.TryParse(e.Value.ToString(), out int id))
        {
            oficinaId = id;
            historicoView = null;
            vendedorList = await vendedorService.GetVendedorAsync(id);
        }



    }

    async Task VendedorSelectionChanged(ChangeEventArgs e)
    {
        string id = e.Value.ToString();

        codigoVendedor = id;
        historicoView = null;
        await GetDataHistorico(IdPeriodo, codigoVendedor);




    }




    async Task GetDataHistorico(int id, string _codigoVendedor)
    {

        historico = await historicoService.GetPCHistoricoByIdPeriodoAsync(id, _codigoVendedor);


        
            historicoView = historico;
            if (documento!="")
            {
                historicoView = historico.Where(item => item.DocumentoString.ToLower().Contains(documento.ToLower())).ToArray();
            }
            if (orden!="")
            {
                historicoView = historico.Where(item =>item.OrdenString.ToLower().Contains(orden.ToLower())).ToArray();
            }

            if (producto!="")
            {
                historicoView = historico.Where(item => item.Producto.ToLower().Contains(producto.ToLower())).ToArray();
            }
            
                      
            if (tipoPagoDescripcion!="")
            {
                historicoView = historico.Where(item => item.DescripcionTipoPago.ToLower().Contains(tipoPagoDescripcion.ToLower())).ToArray();
            }


             historicoView = historicoView.OrderBy(h => h.FechaRegistro).ToArray();




        TotalVendedor = 0;
        foreach (var item in historicoView)
        {
            TotalVendedor = TotalVendedor + item.BsComision;
        }
        TotalVendedorString = ToCurrencyString(TotalVendedor);




    }

    public string ToCurrencyString(decimal d)
    {


        return String.Format("{0:0,0.0}", d);
    }
}
